<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd        
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-4.2.xsd
        http://www.springframework.org/schema/tx 
     	http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">

    <tx:annotation-driven />
    <!-- 安全隐患： db.properties 配置文件中，数据库密码为明文保存 适合开发，不适合商用 -->
    <context:property-placeholder location="classpath:db.properties" />
    <!-- 配置 Druid 连接池 Start -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!-- 初始化大小、最小、最大 -->
        <property name="initialSize" value="${jdbc.initialSize}" />
        <property name="minIdle" value="10" />
        <property name="maxActive" value="${jdbc.maxActive}" />
        <!-- 获取连接时最大的等待时间，单位毫秒 -->
        <property name="maxWait" value="60000" />
        <!-- 多久检测一次需要关闭的空闲连接，单位毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 连接在池中最短的生存时间，单位毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <!-- 检测连接时候的超时时间 -->
        <property name="validationQueryTimeout" value="3000" />
        <!-- 打开removeAbandoned 开关，对于建立时间超过removeAbandonedTimeout的连接强制关闭 -->
        <property name="removeAbandoned" value="true" />
        <!-- 为removeAbandonedTimeoutMillis(默认300*1000)设置值，与 removeAbandoned 关联使用配置指定连接建立多长时间就需要被强制关闭,此时(1800*1000) -->
        <property name="removeAbandonedTimeout" value="1800" />
        <property name="proxyFilters">
            <list>
                <ref bean="stat-filter" />
                <ref bean="wall-filter" />
            </list>
        </property>
    </bean>

    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <property name="slowSqlMillis" value="1000" />
        <property name="logSlowSql" value="true" />
        <property name="mergeSql" value="true" />
    </bean>

    <bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
        <property name="dbType" value="mysql" />
        <property name="config" ref="wall-filter-config" />
    </bean>

    <bean id="wall-filter-config" class="com.alibaba.druid.wall.WallConfig">
        <property name="multiStatementAllow" value="true" />
    </bean>
    <!-- 配置 Druid 连接池 End -->

    <!-- spring的对象监控 begin -->
    <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor" lazy-init="true"></bean>
    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
        <property name="patterns">
            <list>
                <value>com.fsoft.*Controller.*</value>
                <value>com.fsoft.*ServiceImpl.*</value>
            </list>
        </property>
    </bean>
    <aop:config>
        <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
    </aop:config>
    <!-- spring的对象监控 end -->

    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 将 SqlSessionFactory 交由 Spring 的 IoC 容器管理 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" lazy-init="true">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:spring-mybatis.xml" />
        <property name="mapperLocations" value="classpath:com/fsoft/**/*Mapper.xml"></property>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="xin.cymall.dao,com.fsoft" />
        <!-- 扫描目标包下的所有接口，并把其中所有被 @Repository 标识的接口注册为 MapperFactoryBean -->
        <property name="annotationClass" value="org.springframework.stereotype.Repository" />
    </bean>

    <!-- jdbcTemplate -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" lazy-init="true">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 可以使用参数名的jdbcTemplate -->
    <bean id="namedParameterJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate"
        lazy-init="true">
        <constructor-arg ref="dataSource"></constructor-arg>
    </bean>
<!--     <import resource="spring-redis.xml" /> -->
    <import resource="spring-shiro.xml" />
</beans>